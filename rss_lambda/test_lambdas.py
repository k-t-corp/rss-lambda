import unittest
import responses
from typing import List
from datetime import datetime, timezone
from .lambdas import filter_by_description_excluding_substring, filter_by_description_containing_image

def _response(description_htmls: List[str]):
    def description_html_to_xml(description_html: str) -> str:
        return f"""<item>
    <title>title</title>
    <dc:creator>@twitter_handle</dc:creator>
    <description><![CDATA[{description_html}]]></description>
    <pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S GMT")}</pubDate>
    <guid>http://nitter.example.com/twitter_handle/status/-1#m</guid>
    <link>http://nitter.example.com/twitter_handle/status/-1#m</link>
</item>"""

    return f"""<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="http://nitter.example.com/twitter_handle/rss" rel="self" type="application/rss+xml"/>
    <title>twitter_handle / @twitter_handle</title>
    <link>http://nitter.example.com/twitter_handle</link>
    <description>Twitter feed for: @twitter_handle. Generated by nitter.example.com
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    {'\n'.join(map(description_html_to_xml, description_htmls))}
</channel>
</rss>"""


class LambdasTestCase(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None

    def _add_response(self, body):
        responses.add(
            responses.GET,
            'https://nitter.example.com/twitter_handle/rss',
            status=200,
            content_type='application/rss+xml',
            body=body
        )

    @responses.activate
    def test_filter_by_description_excluding_substring(self):
        self._add_response(_response([
            '<p>some random text</p>',
            '<p>also some random texts but EXCLUDE ME hahaha</p>',
        ]))
        self.assertEqual(
            filter_by_description_excluding_substring('https://nitter.example.com/twitter_handle/rss', 'EXCLUDE ME'),
            _response([
                '<p>some random text</p>',
            ])
        )

    @responses.activate
    def test_filter_by_description_containing_image(self):
        self._add_response(_response([
            '<p>some random text</p>',
            '<p>also some random texts but with images hahahaha</p><img src="https://nitter.example.com/twitter_handle/pic/pic.jpg" />',
        ]))
        self.assertEqual(
            filter_by_description_containing_image('https://nitter.example.com/twitter_handle/rss'),
            _response([
                '<p>also some random texts but with images hahahaha</p><img src="https://nitter.example.com/twitter_handle/pic/pic.jpg" />',
            ])
        )
